package challenge43

import (
	"crypto/sha1"
	"io/ioutil"
	"math/big"
	"testing"
)

func TestDSA(t *testing.T) {
	dsa := DSA{}
	dsa.Initialize()

	myKey := dsa.GenerateUserKey()

	m := []byte("hello mother")
	mh := sha1.Sum(m)
	sig := dsa.Sign(mh[:], myKey.Private)

	verified := dsa.Verify(mh[:], sig, myKey.Public)

	if !verified {
		t.Fail()
	}
}

func TestRecoverPrivate(t *testing.T) {
	dsa := DSA{}
	dsa.Initialize()

	m, err := ioutil.ReadFile("./43.txt")
	if err != nil {
		t.Fail()
	}

	mh := sha1.Sum(m)

	r := new(big.Int)
	r.SetString("548099063082341131477253921760299949438196259240", 10)

	s := new(big.Int)
	s.SetString("857042759984254168557880549501802188789837994940", 10)

	publicBytes := []byte{0x8, 0x4a, 0xd4, 0x71, 0x9d, 0x4, 0x44, 0x95, 0x49, 0x6a, 0x32, 0x1, 0xc8, 0xff, 0x48, 0x4f, 0xeb, 0x45, 0xb9, 0x62, 0xe7, 0x30, 0x2e, 0x56, 0xa3, 0x92, 0xae, 0xe4, 0xab, 0xab, 0x3e, 0x4b, 0xde, 0xbf, 0x29, 0x55, 0xb4, 0x73, 0x60, 0x12, 0xf2, 0x1a, 0x8, 0x8, 0x40, 0x56, 0xb1, 0x9b, 0xcd, 0x7f, 0xee, 0x56, 0x4, 0x8e, 0x0, 0x4e, 0x44, 0x98, 0x4e, 0x2f, 0x41, 0x17, 0x88, 0xef, 0xdc, 0x83, 0x7a, 0xd, 0x2e, 0x5a, 0xbb, 0x7b, 0x55, 0x50, 0x39, 0xfd, 0x24, 0x3a, 0xc0, 0x1f, 0xf, 0xb2, 0xed, 0x1d, 0xec, 0x56, 0x82, 0x80, 0xce, 0x67, 0x8e, 0x93, 0x18, 0x68, 0xd2, 0x3e, 0xb0, 0x95, 0xfd, 0xe9, 0xd3, 0x77, 0x91, 0x91, 0xb8, 0xc0, 0x29, 0x9d, 0x6e, 0x7, 0xbb, 0xb2, 0x83, 0xe6, 0x63, 0x34, 0x51, 0xe5, 0x35, 0xc4, 0x55, 0x13, 0xb2, 0xd3, 0x3c, 0x99, 0xea, 0x17}
	publicKey := new(big.Int).SetBytes(publicBytes)
	sig := MessageSignature{
		R: r,
		S: s,
	}

	recoveredKey := TryManyK(&dsa, mh[:], sig, publicKey)

	// to confirm that we have found the correct key, we will sign something with it and verify with
	// the public key
	myMessage := []byte("this is my own message")
	myMessageHash := sha1.Sum(myMessage)
	mySig := dsa.Sign(myMessageHash[:], recoveredKey)
	verified := dsa.Verify(myMessageHash[:], mySig, publicKey)

	if !verified {
		t.Fail()
	}
}
